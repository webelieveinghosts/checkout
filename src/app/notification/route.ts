import { getPaymentById } from "@/mercadopago/payment"
import { successPayment } from "@/supabase/admin"
import { NextRequest, NextResponse } from "next/server"

export async function POST(req: NextRequest) {
    try {
        console.log("üì© [Webhook] Nova requisi√ß√£o recebida:", req.nextUrl.toString())

        const searchParams = req.nextUrl.searchParams
        const topic = searchParams.get("topic")
        const paymentId = searchParams.get("id")

        console.log("üîç [Webhook] Par√¢metros recebidos:", {
            topic,
            paymentId
        })

        if (topic !== "payment") {
            console.warn("‚ö†Ô∏è [Webhook] T√≥pico inv√°lido:", topic)
            return NextResponse.json({ message: "No valid topic." }, { status: 400 })
        }

        if (!paymentId) {
            console.warn("‚ö†Ô∏è [Webhook] Nenhum payment_id informado.")
            return NextResponse.json({ message: "Missing payment ID." }, { status: 400 })
        }

        console.log("üí≥ [Webhook] Buscando informa√ß√µes do pagamento:", paymentId)
        const info = await getPaymentById(paymentId)

        console.log("üì¶ [Webhook] Retorno do getPaymentById:", {
            id: info?.id,
            status: info?.status,
            status_detail: info?.status_detail,
            transaction_amount: info?.transaction_amount,
        })

        if (!info || info.status !== "approved") {
            console.log("‚ùå [Webhook] Pagamento n√£o aprovado ou inv√°lido:", info?.status)
            return NextResponse.json({ message: "No valid payment id." }, { status: 201 })
        }

        console.log("‚úÖ [Webhook] Pagamento aprovado! Atualizando Supabase‚Ä¶")
        const success = await successPayment(paymentId)
        console.log("üíæ [Webhook] Resultado da atualiza√ß√£o:", success ? "OK ‚úÖ" : "Erro ‚ùå")

        return NextResponse.json({ message: "approved" }, { status: 200 })

    } catch (err) {
        console.error("üî• [Webhook] Erro ao processar notifica√ß√£o:", err)
        return NextResponse.json({ message: "Internal server error." }, { status: 500 })
    }
}
